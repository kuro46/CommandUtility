plugins {
    id 'net.ltgt.errorprone' version '1.1.1'
    id "io.freefair.lombok" version "5.2.1"
    id 'maven-publish'
    id 'jacoco'
    id 'checkstyle'
    id 'java'
}

group = 'dev.shirokuro'
version = '0.10.1'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
}

dependencies {
    compileOnly 'org.bukkit:bukkit:1.12.2-R0.1-SNAPSHOT'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.+'
    testImplementation 'org.assertj:assertj-core:3.16.+'
    testImplementation 'com.github.seeseemelk:MockBukkit:v1.15-SNAPSHOT'
    // ErrorProne
    errorprone 'com.google.errorprone:error_prone_core:2.+'
}

if (!JavaVersion.current().isJava9Compatible()) {
    dependencies {
        errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
    }
}

configurations {
    compileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
    annotationProcessor {
        resolutionStrategy.activateDependencyLocking()
    }
    runtimeClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
    testCompileClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
    testAnnotationProcessor {
        resolutionStrategy.activateDependencyLocking()
    }
    testRuntimeClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.test {
    testLogging.showStandardStreams = true
    useJUnitPlatform()
    testLogging {
        events('passed', 'skipped', 'failed')
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

// maven

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.name
            from components.java
            pom {
                name = 'CommandUtility'
                url = 'https://github.com/kuro46/CommandUtility'
            }
        }
    }

    repositories {
        if (version.endsWith('SNAPSHOT')) {
            mavenLocal()
        } else {
            maven {
                def publishRootDir = project.hasProperty('commandutility.publish.rootdir')
                    ? project.getProperty('commandutility.publish.rootdir').toString()
                    : buildDir.toString()
                url = "$publishRootDir/repos/releases"
            }
        }
    }
}

javadoc {
    options.encoding = 'UTF-8'
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
